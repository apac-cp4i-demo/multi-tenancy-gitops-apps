apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-detect-secrets-v2-6-13
  annotations:
    description: Detect secrets for the CI pipelines.
    app.openshift.io/description: Detect secrets for the CI pipelines.
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
  labels:
    version: 2.6.13
spec:
  params:
    - name: git-url
    - name: git-revision
      default: master
    - name: source-dir
      default: /source
    - name: detect-secrets-strict-mode
      description: If detect-secrets-strict-mode is true and potential secrets detected, the step will be failed.
      default: "false"
  volumes:
    - name: source
      emptyDir: {}
  stepTemplate:
    volumeMounts:
      - name: source
        mountPath: $(params.source-dir)
  steps:
    - name: git-clone
      image: quay.io/ibmgaragecloud/alpine-git
      env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "$(echo $(params.git-url) | awk -F '://' '{print $1}')://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F '://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - name: detect-secrets
      env:
        - name: DETECT_SECRETS_STRICT_MODE
          value: $(params.detect-secrets-strict-mode)
      image: ibmcom/detect-secrets:dss-188-id-237292801-time-1631197167
      workingDir: $(params.source-dir)
      script: |
        #!/usr/bin/env python3

        import subprocess
        import json
        import os
        import sys

        detect_mode = os.getenv("DETECT_SECRETS_STRICT_MODE")

        print('Running detect-secrets ...')
        print(subprocess.run(
            ['detect-secrets', 'scan', '--update', '.secrets.baseline']
        ))
        found_secrets = []

        with open('.secrets.baseline', 'r') as f:
            baseline = json.loads(f.read())
            for file, secrets in baseline['results'].items():
                for secret in secrets:
                    if secret.get('is_secret', True):
                        found_secrets.append((file, secret))

        if found_secrets:
            print('Secrets were found in the source code!')
            print('If these contain false positives, they can be marked as such with the `detect-secrets audit .secrets.baseline` command and committing the updated baseline file into the application repo.')  # noqa: E501
            print('Read more about the tool at https://w3.ibm.com/w3publisher/detect-secrets/developer-tool\n\n')  # noqa: E501
            print('FOUND SECRETS:')
            for secret in found_secrets:
                print('File: ' + secret[0] + ' Line: ' + str(secret[1]['line_number']) + ' Type: ' + secret[1]['type'])  # noqa: E501
            if detect_mode == "true":
                print('\nERROR: Detect Secrets Failure.')
                sys.exit(1)
            else:
                print("\nWARNING: the step exits finally with above issue due to the detect-secrets-strict-mode is not true.")
        else:
            print('NO SECRETS FOUND')
            print('Detect Secrets Success')
